# Makefile for building JITEnabler iOS app

# Configuration
XCODE_PROJECT := JITEnabler.xcodeproj
XCODE_SCHEME := JITEnabler
BUNDLE_ID := com.jitenabler.app
BUILD_DIR := build
IPA_DIR := $(BUILD_DIR)/ios/ipa
ARCHIVE_PATH := $(BUILD_DIR)/JITEnabler.xcarchive
EXPORT_OPTIONS_PLIST := ExportOptions.plist
DERIVED_DATA_PATH := $(BUILD_DIR)/DerivedData
IPA_NAME := JITEnabler.ipa

# Default target
.PHONY: all
all: clean setup build-ipa

# Clean build artifacts
.PHONY: clean
clean:
        @echo "Cleaning build directory..."
        @rm -rf $(BUILD_DIR)
        @mkdir -p $(BUILD_DIR)
        @mkdir -p $(IPA_DIR)

# Setup environment
.PHONY: setup
setup:
        @echo "Setting up environment..."
        @echo "DROPBOX_APP_KEY=2bi422xpd3xd962" > .env
        @echo "DROPBOX_APP_SECRET=j3yx0b41qdvfu86" >> .env
        @echo "DROPBOX_REFRESH_TOKEN=RvyL03RE5qAAAAAAAAAAAVMVebvE7jDx8Okd0ploMzr85c6txvCRXpJAt30mxrKF" >> .env
        @echo "Creating export options plist..."
        @echo '<?xml version="1.0" encoding="UTF-8"?>' > $(EXPORT_OPTIONS_PLIST)
        @echo '<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">' >> $(EXPORT_OPTIONS_PLIST)
        @echo '<plist version="1.0">' >> $(EXPORT_OPTIONS_PLIST)
        @echo '<dict>' >> $(EXPORT_OPTIONS_PLIST)
        @echo '    <key>method</key>' >> $(EXPORT_OPTIONS_PLIST)
        @echo '    <string>development</string>' >> $(EXPORT_OPTIONS_PLIST)
        @echo '    <key>compileBitcode</key>' >> $(EXPORT_OPTIONS_PLIST)
        @echo '    <false/>' >> $(EXPORT_OPTIONS_PLIST)
        @echo '    <key>signingStyle</key>' >> $(EXPORT_OPTIONS_PLIST)
        @echo '    <string>automatic</string>' >> $(EXPORT_OPTIONS_PLIST)
        @echo '</dict>' >> $(EXPORT_OPTIONS_PLIST)
        @echo '</plist>' >> $(EXPORT_OPTIONS_PLIST)

# Build for device (requires signing)
.PHONY: build-device
build-device:
        @echo "Building for iOS device..."
        xcodebuild clean build \
                -project $(XCODE_PROJECT) \
                -scheme $(XCODE_SCHEME) \
                -configuration Release \
                -sdk iphoneos \
                -derivedDataPath $(DERIVED_DATA_PATH) \
                CODE_SIGN_IDENTITY="" \
                CODE_SIGNING_REQUIRED=NO \
                CODE_SIGNING_ALLOWED=NO

# Build for simulator (no signing required)
.PHONY: build-simulator
build-simulator:
        @echo "Building for iOS simulator..."
        xcodebuild clean build \
                -project $(XCODE_PROJECT) \
                -scheme $(XCODE_SCHEME) \
                -configuration Debug \
                -sdk iphonesimulator \
                -derivedDataPath $(DERIVED_DATA_PATH) \
                -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest' \
                CODE_SIGN_IDENTITY="" \
                CODE_SIGNING_REQUIRED=NO \
                CODE_SIGNING_ALLOWED=NO

# Create IPA from simulator build
.PHONY: create-simulator-ipa
create-simulator-ipa: build-simulator
        @echo "Creating IPA from simulator build..."
        @APP_PATH=$$(find $(DERIVED_DATA_PATH)/Build/Products -name "*.app" -type d | head -1); \
        if [ -n "$$APP_PATH" ]; then \
                echo "Found app at: $$APP_PATH"; \
                mkdir -p $(IPA_DIR)/Payload; \
                cp -R $$APP_PATH $(IPA_DIR)/Payload/; \
                cd $(IPA_DIR) && zip -r $(IPA_NAME) Payload && rm -rf Payload; \
                echo "Created IPA at: $(IPA_DIR)/$(IPA_NAME)"; \
        else \
                echo "Error: Could not find .app file in build products"; \
                find $(DERIVED_DATA_PATH) -name "*.app" -type d; \
                exit 1; \
        fi

# Archive and create IPA (requires signing)
.PHONY: archive
archive:
        @echo "Creating archive..."
        xcodebuild archive \
                -project $(XCODE_PROJECT) \
                -scheme $(XCODE_SCHEME) \
                -configuration Release \
                -archivePath $(ARCHIVE_PATH) \
                -destination generic/platform=iOS \
                CODE_SIGN_IDENTITY="" \
                CODE_SIGNING_REQUIRED=NO \
                CODE_SIGNING_ALLOWED=NO

# Export IPA from archive
.PHONY: export-ipa
export-ipa: archive
        @echo "Exporting IPA from archive..."
        xcodebuild -exportArchive \
                -archivePath $(ARCHIVE_PATH) \
                -exportPath $(IPA_DIR) \
                -exportOptionsPlist $(EXPORT_OPTIONS_PLIST)

# Build IPA (choose the appropriate method based on environment)
.PHONY: build-ipa
build-ipa: create-simulator-ipa
        @echo "IPA build complete"
        @echo "IPA file location: $(IPA_DIR)/$(IPA_NAME)"
        @ls -la $(IPA_DIR)/$(IPA_NAME)

# Show build info
.PHONY: info
info:
        @echo "Project: $(XCODE_PROJECT)"
        @echo "Scheme: $(XCODE_SCHEME)"
        @echo "Bundle ID: $(BUNDLE_ID)"
        @echo "Build Directory: $(BUILD_DIR)"
        @echo "IPA Directory: $(IPA_DIR)"
        @echo "IPA Name: $(IPA_NAME)"
        @echo "Derived Data Path: $(DERIVED_DATA_PATH)"
        @echo "Archive Path: $(ARCHIVE_PATH)"
        @echo "Export Options Plist: $(EXPORT_OPTIONS_PLIST)"
        @echo "\nXcode Project Details:"
        @xcodebuild -list -project $(XCODE_PROJECT) || echo "Error: Could not find Xcode project"