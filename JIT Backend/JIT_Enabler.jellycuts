// JIT Enabler Shortcut
// Created with Jellycuts
// This shortcut enables JIT compilation for iOS apps

import { Shortcut, ShowResult, GetVariable, SetVariable, Dictionary, Text, URL, GetContentsOfURL, If, Menu, List, Ask, RunJavaScript, OpenApp, Nothing, Comment, GetDeviceDetails } from "jellycuts";

// Create the shortcut
const shortcut = new Shortcut("JIT Enabler");

// Set shortcut icon
shortcut.icon = {
    color: "blue",
    glyph: "bolt.fill"
};

// Import questions
shortcut.importQuestion("backendURL", "What is the URL of your JIT Backend?", "https://your-jit-backend.onrender.com");

// Add comment explaining the shortcut
shortcut.add(
    Comment("JIT Enabler Shortcut\nThis shortcut enables JIT compilation for iOS apps by communicating with a JIT backend server.")
);

// Set backend URL from import question
shortcut.add(
    Text("{{backendURL}}"),
    SetVariable("backendURL")
);

// Get device information
shortcut.add(
    GetDeviceDetails("Device Name"),
    SetVariable("deviceName"),
    
    GetDeviceDetails("System Version"),
    SetVariable("iosVersion"),
    
    GetDeviceDetails("Device Model"),
    SetVariable("deviceModel")
);

// Generate a pseudo-UDID using JavaScript
const generateUDIDScript = `
// Generate a unique device identifier based on device properties
const deviceName = args.shortcutParameter.deviceName;
const deviceModel = args.shortcutParameter.deviceModel;
const iosVersion = args.shortcutParameter.iosVersion;

// Create a string with device info
const deviceInfoString = \`\${deviceName}-\${deviceModel}-\${iosVersion}-\${Date.now()}\`;

// Hash the string to create a pseudo-UDID
function hashString(str) {
  let hash = 0;
  if (str.length === 0) return hash;
  for (let i = 0; i < str.length; i++) {
    const char = str.charCodeAt(i);
    hash = ((hash << 5) - hash) + char;
    hash = hash & hash;
  }
  return hash.toString(16).replace('-', '');
}

const pseudoUDID = hashString(deviceInfoString);
return pseudoUDID;
`;

shortcut.add(
    RunJavaScript(generateUDIDScript, {
        deviceName: GetVariable("deviceName"),
        deviceModel: GetVariable("deviceModel"),
        iosVersion: GetVariable("iosVersion")
    }),
    SetVariable("deviceUDID")
);

// Check if we already have a JIT token
shortcut.add(
    If({
        input: GetVariable("jitToken"),
        condition: "matches",
        value: "^(?!.+)$", // Regex to check if empty
        then: [
            // Show registration message
            ShowResult("Registering your device with JIT Backend..."),
            
            // Create registration URL
            URL(GetVariable("backendURL") + "/register"),
            
            // Create registration data
            Dictionary({
                "udid": GetVariable("deviceUDID"),
                "device_name": GetVariable("deviceName"),
                "ios_version": GetVariable("iosVersion"),
                "device_model": GetVariable("deviceModel")
            }),
            
            // Send registration request
            GetContentsOfURL({
                url: GetVariable("backendURL") + "/register",
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: "JSON"
            }),
            
            // Extract and save token
            GetVariable("Value For 'token'"),
            SetVariable("jitToken"),
            
            // Save token to device storage
            Dictionary({
                "jitToken": GetVariable("jitToken")
            }),
            SetVariable("JIT Enabler Data", true) // Save to device storage
        ]
    })
);

// App selection menu
shortcut.add(
    ShowResult("Select the app you want to enable JIT for:"),
    
    Menu("Select an app to enable JIT", {
        "Emulators": [
            List("Select an emulator app", [
                "Delta Emulator",
                "PPSSPP",
                "UTM",
                "iNDS",
                "Provenance",
                "Other (Enter Bundle ID)"
            ]),
            
            // Handle "Other" option
            If({
                input: GetVariable("Chosen Item"),
                condition: "is",
                value: "Other (Enter Bundle ID)",
                then: [
                    Ask("Enter the bundle ID of the app (e.g., com.example.app)"),
                    SetVariable("bundleID")
                ]
            }),
            
            // Handle Delta Emulator
            If({
                input: GetVariable("Chosen Item"),
                condition: "is",
                value: "Delta Emulator",
                then: [
                    Text("com.rileytestut.Delta"),
                    SetVariable("bundleID")
                ]
            }),
            
            // Handle PPSSPP
            If({
                input: GetVariable("Chosen Item"),
                condition: "is",
                value: "PPSSPP",
                then: [
                    Text("org.ppsspp.ppsspp"),
                    SetVariable("bundleID")
                ]
            }),
            
            // Handle UTM
            If({
                input: GetVariable("Chosen Item"),
                condition: "is",
                value: "UTM",
                then: [
                    Text("com.utmapp.UTM"),
                    SetVariable("bundleID")
                ]
            }),
            
            // Handle iNDS
            If({
                input: GetVariable("Chosen Item"),
                condition: "is",
                value: "iNDS",
                then: [
                    Text("net.nerd.iNDS"),
                    SetVariable("bundleID")
                ]
            }),
            
            // Handle Provenance
            If({
                input: GetVariable("Chosen Item"),
                condition: "is",
                value: "Provenance",
                then: [
                    Text("org.provenance-emu.provenance"),
                    SetVariable("bundleID")
                ]
            })
        ],
        
        "JavaScript Apps": [
            List("Select a JavaScript app", [
                "JavaScriptCore",
                "WebKit-based App",
                "React Native App",
                "Other (Enter Bundle ID)"
            ]),
            
            // Handle "Other" option
            If({
                input: GetVariable("Chosen Item"),
                condition: "is",
                value: "Other (Enter Bundle ID)",
                then: [
                    Ask("Enter the bundle ID of the app (e.g., com.example.app)"),
                    SetVariable("bundleID")
                ]
            }),
            
            // Handle JavaScriptCore
            If({
                input: GetVariable("Chosen Item"),
                condition: "is",
                value: "JavaScriptCore",
                then: [
                    Text("com.apple.JavaScriptCore"),
                    SetVariable("bundleID")
                ]
            }),
            
            // Handle WebKit-based App
            If({
                input: GetVariable("Chosen Item"),
                condition: "is",
                value: "WebKit-based App",
                then: [
                    Ask("Enter the bundle ID of the WebKit-based app"),
                    SetVariable("bundleID")
                ]
            }),
            
            // Handle React Native App
            If({
                input: GetVariable("Chosen Item"),
                condition: "is",
                value: "React Native App",
                then: [
                    Ask("Enter the bundle ID of the React Native app"),
                    SetVariable("bundleID")
                ]
            })
        ],
        
        "Other Apps": [
            Ask("Enter the bundle ID of the app you want to enable JIT for"),
            SetVariable("bundleID")
        ]
    })
);

// Request JIT enablement
shortcut.add(
    ShowResult("Enabling JIT for " + GetVariable("bundleID") + "..."),
    
    // Create app info dictionary
    Dictionary({
        "bundle_id": GetVariable("bundleID"),
        "ios_version": GetVariable("iosVersion")
    }),
    
    // Send JIT enablement request
    GetContentsOfURL({
        url: GetVariable("backendURL") + "/enable-jit",
        method: "POST",
        headers: {
            "Content-Type": "application/json",
            "Authorization": "Bearer " + GetVariable("jitToken")
        },
        body: "JSON"
    }),
    SetVariable("jitResponse"),
    
    // Check if JIT was enabled successfully
    If({
        input: GetVariable("jitResponse.status"),
        condition: "contains",
        value: "JIT enabled",
        then: [
            // Show success message
            ShowResult("JIT enabled successfully! Launching app..."),
            
            // Save JIT session ID
            GetVariable("jitResponse.session_id"),
            SetVariable("jitSessionID"),
            
            // Launch the app
            OpenApp(GetVariable("bundleID"))
        ],
        else: [
            // Show error message
            ShowResult("Error enabling JIT: " + GetVariable("jitResponse.error"))
        ]
    })
);

// Error handling for network issues
shortcut.add(
    If({
        input: GetVariable("jitResponse"),
        condition: "equals",
        value: "null",
        then: [
            ShowResult("Network error: Could not connect to JIT backend server. Please check your connection and try again.")
        ]
    })
);

// Export the shortcut
export default shortcut;